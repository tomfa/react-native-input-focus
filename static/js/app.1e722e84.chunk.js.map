{"version":3,"sources":["web-build/register-service-worker.js","Docs.tsx","Footer.tsx","Inputs.tsx","hooks.ts","Intro.tsx","App.tsx","index.js"],"names":["navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","console","Docs","Text","style","styles","h2","language","highlighter","StyleSheet","create","fontSize","margin","marginTop","Footer","footer","link","onPress","Linking","openURL","position","bottom","padding","marginBottom","color","textDecorationLine","Inputs","refs","useRef","useState","currentFocus","focus","useCallback","key","current","blur","setRef","name","input","useInputFocus","TextInput","placeholder","ref","onSubmitEditing","backgroundColor","Intro","header","paragraph","container","flex","alignItems","justifyContent","paddingBottom","registerRootComponent","View"],"mappings":"oHAEI,kBAAmBA,WACrBC,OAAOC,iBAAiB,QAAQ,WAC9BF,UAAUG,cACPC,SAAS,mDAAoD,CAAEC,MAAO,+BACtEC,MAAK,SAAUC,OAGfC,OAAM,SAAUC,GACfC,QAAQH,KAAK,oCAAqCE,U,6GCuC3C,SAASE,IACtB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,IAApB,SACA,kBAAC,IAAD,CAAmBC,SAAS,MAAMC,YAAa,SApBlC,kUAuBb,kBAACL,EAAA,EAAD,CAAMC,MAAOC,EAAOC,IAApB,eACA,kBAAC,IAAD,CAAmBC,SAAS,MAAMC,YAAa,SArDtC,mnBA4Df,IAAMH,EAASI,IAAWC,OAAO,CAC/BJ,GAAI,CACFK,SAAU,GACVC,OAAQ,EACRC,UAAW,M,QCjEA,SAASC,IAGtB,OACE,kBAACX,EAAA,EAAD,CAAMC,MAAO,CAACC,EAAOU,OAAQV,EAAOW,MAAOC,QAHnB,kBACxBC,IAAQC,QAAQ,sDAEhB,6CAMJ,IAAMd,EAASI,IAAWC,OAAO,CAC/BK,OAAQ,CACNK,SAAU,WACVC,OAAQ,EACRC,QAAS,EACTC,aAAc,IAEhBP,KAAM,CACJQ,MAAO,OACPC,mBAAoB,e,0BCjBT,SAASC,IAAU,IAAD,ECFJ,WAC3B,IAAMC,EAAOC,iBAAqC,IADjB,EAEOC,mBAAiB,IAFxB,WAE1BC,EAF0B,UAiBjC,MAAO,CAAEC,MAdKC,uBACZ,SAACC,GACKN,EAAKO,QAAQJ,IACfH,EAAKO,QAAQJ,GAAcK,OAEzBR,EAAKO,QAAQD,IACfN,EAAKO,QAAQD,GAAKF,UAGtB,CAACD,IAKaM,OAHD,SAACC,GAAD,OAAkB,SAACC,GAChCX,EAAKO,QAAQG,GAAQC,KDZGC,GAAlBR,EADuB,EACvBA,MAAOK,EADgB,EAChBA,OACf,OACE,oCACE,kBAACI,EAAA,EAAD,CACEC,YAAY,OACZrC,MAAOC,EAAOiC,MACdI,IAAKN,EAAO,QACZO,gBAAiB,kBAAMZ,EAAM,cAE/B,kBAACS,EAAA,EAAD,CACEC,YAAY,UACZrC,MAAOC,EAAOiC,MACdI,IAAKN,EAAO,WACZO,gBAAiB,kBAAMZ,EAAM,YAMrC,IAAM1B,EAASI,IAAWC,OAAO,CAC/B4B,MAAO,CACLhB,QAAS,GACTsB,gBAAiB,OACjBrB,aAAc,KE1BH,SAASsB,IACtB,OACE,oCACE,kBAAC1C,EAAA,EAAD,CAAMC,MAAOC,EAAOyC,QAApB,gCACA,kBAAC3C,EAAA,EAAD,CAAMC,MAAOC,EAAO0C,WAApB,8CAC8C,MAMpD,IAAM1C,EAASI,IAAWC,OAAO,CAC/BoC,OAAQ,CACNnC,SAAU,GACVC,OAAQ,IAEVmC,UAAW,CACTxB,aAAc,MCDlB,IAAMlB,EAASI,IAAWC,OAAO,CAC/BsC,UAAW,CACTC,KAAM,EACNL,gBAAiB,UACjBM,WAAY,SACZC,eAAgB,SAChBC,cAAe,OClBnBC,aDCe,WACb,OACE,kBAACC,EAAA,EAAD,CAAMlD,MAAOC,EAAO2C,WAClB,kBAACH,EAAD,MACA,kBAACnB,EAAD,MACA,kBAACxB,EAAD,MACA,kBAACY,EAAD,Y","file":"static/js/app.1e722e84.chunk.js","sourcesContent":["/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/react-native-input-focus/expo-service-worker.js', { scope: '/react-native-input-focus/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","import React from \"react\";\nimport { StyleSheet, Text  } from \"react-native\";\nimport SyntaxHighlighter from \"react-native-syntax-highlighter\";\n\nconst HOOK_CODE = `\ntype InputLookup = { [key: string]: TextInput };\n\nexport const useInputFocus = () => {\n  const refs = useRef<InputLookup>({});\n  const [\n    currentFocus, \n    setCurrentFocus\n  ] = useState<string>(\"\");\n  const focus = useCallback(\n    (key: string) => {\n      if (refs.current[currentFocus]) {\n        refs.current[currentFocus].blur();\n      }\n      if (refs.current[key]) {\n        refs.current[key].focus();\n      }\n    },\n    [currentFocus]\n  );\n  const setRef = (name: string) \n      => (input: TextInput) \n      => {\n    refs.current[name] = input;\n  };\n  return { focus, setRef };\n}; \n`;\n\nconst USE_HOOK_CODE = `\nconst { focus, setRef } = useInputFocus();\nreturn (\n  <TextInput\n    ref={setRef(\"name\")}\n    {/* Blur needed for multiline keyboard */}\n    blurOnSubmit={false} \n    onSubmitEditing={() => focus(\"address\")}\n  />\n  <TextInput\n    ref={setRef(\"address\")}\n    onSubmitEditing={() => focus(\"name\")}\n  />\n)\n`;\n\nexport default function Docs() {\n  return (\n    <>\n      <Text style={styles.h2}>Usage</Text>\n      <SyntaxHighlighter language=\"tsx\" highlighter={\"prism\" || \"hljs\"}>\n        {USE_HOOK_CODE}\n      </SyntaxHighlighter>\n      <Text style={styles.h2}>Custom hook</Text>\n      <SyntaxHighlighter language=\"tsx\" highlighter={\"prism\" || \"hljs\"}>\n        {HOOK_CODE}\n      </SyntaxHighlighter>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  h2: {\n    fontSize: 18,\n    margin: 8,\n    marginTop: 18,\n  },\n});\n","import React from \"react\";\nimport { StyleSheet, Text, Linking } from \"react-native\";\n\nexport default function Footer() {\n  const onGithubLinkPress = () =>\n    Linking.openURL(\"http://github.com/tomfa/react-native-input-focus\");\n  return (\n    <Text style={[styles.footer, styles.link]} onPress={onGithubLinkPress}>\n      github.com/tomfa/react-native-input-focus\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  footer: {\n    position: \"absolute\",\n    bottom: 0,\n    padding: 8,\n    marginBottom: 60,\n  },\n  link: {\n    color: \"blue\",\n    textDecorationLine: \"underline\",\n  },\n});\n","import React from \"react\";\nimport { StyleSheet, TextInput } from \"react-native\";\n\nimport { useInputFocus } from \"./hooks\";\n\nexport default function Inputs() {\n  const { focus, setRef } = useInputFocus();\n  return (\n    <>\n      <TextInput\n        placeholder=\"Name\"\n        style={styles.input}\n        ref={setRef(\"name\")}\n        onSubmitEditing={() => focus(\"address\")}\n      />\n      <TextInput\n        placeholder=\"Address\"\n        style={styles.input}\n        ref={setRef(\"address\")}\n        onSubmitEditing={() => focus(\"name\")}\n      />\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  input: {\n    padding: 12,\n    backgroundColor: \"#fff\",\n    marginBottom: 8,\n  },\n});\n","import { useCallback, useRef, useState } from \"react\";\nimport { TextInput } from \"react-native\";\n\nexport const useInputFocus = () => {\n  const refs = useRef<{ [key: string]: TextInput }>({});\n  const [currentFocus, setCurrentFocus] = useState<string>(\"\");\n  const focus = useCallback(\n    (key: string) => {\n      if (refs.current[currentFocus]) {\n        refs.current[currentFocus].blur();\n      }\n      if (refs.current[key]) {\n        refs.current[key].focus();\n      }\n    },\n    [currentFocus]\n  );\n  const setRef = (name: string) => (input: TextInput) => {\n    refs.current[name] = input;\n  };\n  return { focus, setRef };\n};\n","import React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\n\nexport default function Intro() {\n  return (\n    <>\n      <Text style={styles.header}>React Native input autofocus</Text>\n      <Text style={styles.paragraph}>\n        The inputs will focus each other on submit.{\" \"}\n      </Text>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    fontSize: 36,\n    margin: 20,\n  },\n  paragraph: {\n    marginBottom: 18,\n  },\n});\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nimport Docs from \"./Docs\";\nimport Footer from \"./Footer\";\nimport Inputs from \"./Inputs\";\nimport Intro from \"./Intro\";\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Intro />\n      <Inputs />\n      <Docs />\n      <Footer />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#bebec3\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingBottom: 100,\n  },\n});\n","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}